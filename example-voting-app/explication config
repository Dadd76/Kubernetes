### front app déployment 

1. apiVersion: apps/v1
Cela indique que nous utilisons la version apps/v1 de l'API Kubernetes, qui est utilisée pour gérer les déploiements et autres ressources liées aux applications.

2. kind: Deployment
Le type de ressource que tu crées est un déploiement. Un déploiement dans Kubernetes permet de gérer des pods (et donc des conteneurs) en fonction de la configuration fournie. Kubernetes s'assure que le nombre de réplicas spécifié est toujours disponible.

3. metadata:
La section metadata fournit des informations générales sur le déploiement.

labels:
app: vote: Le label app: vote permet d'identifier ce déploiement et d'associer les pods créés à ce déploiement à d'autres ressources (comme le service que tu as défini précédemment).
name: vote: Le nom du déploiement est vote.
4. spec:
La section spec décrit la configuration du déploiement, notamment le nombre de réplicas, le sélecteur et le modèle pour créer les pods.

replicas: 1: Cela indique qu'un seul pod sera déployé. Si tu veux avoir plus d'instances de ton application pour augmenter la disponibilité ou la scalabilité, tu peux augmenter ce nombre (par exemple replicas: 3).

selector:

matchLabels:
app: vote: Ce sélecteur indique que ce déploiement doit gérer les pods ayant l'étiquette app: vote. Cela permet de lier ce déploiement aux pods correspondants, pour que Kubernetes sache quels pods ce déploiement va gérer.
template: Le modèle de pod à déployer, c'est-à-dire comment chaque pod sera configuré.

metadata:
labels:
app: vote: L'étiquette app: vote est appliquée à chaque pod créé par ce déploiement, ce qui permet au service de cibler ces pods (via le sélecteur du service).
spec:
containers: Cette section définit les conteneurs qui doivent être lancés dans le pod.
image: dockersamples/examplevotingapp_vote: Il s'agit de l'image Docker de ton application. Dans ce cas, il s'agit de l'image dockersamples/examplevotingapp_vote. Si tu as une autre image Docker pour ton application, tu peux la remplacer ici.
name: vote: Le nom donné au conteneur.
ports:
containerPort: 80: Le port sur lequel ton application à l'intérieur du conteneur écoute. Kubernetes va exposer ce port du conteneur à l'intérieur du pod.
name: vote: Le nom donné à ce port, qui pourrait être utilisé pour la configuration de certains services ou d'autres ressources Kubernetes.
Ce que fait ce fichier :
Ce fichier YAML définit un déploiement Kubernetes pour ton application vote. Il crée un pod qui contient un seul conteneur utilisant l'image dockersamples/examplevotingapp_vote et exposant le port 80 du conteneur.

Intégration avec ton fichier de service :
Ce déploiement va créer un pod avec l'étiquette app: vote. Comme ton service Kubernetes cible les pods avec le même label (app: vote), le service que tu as défini précédemment pourra diriger le trafic vers ce pod.


### Déclaration du service vote 

1. apiVersion: v1
Cela définit la version de l'API Kubernetes utilisée pour cette ressource. Ici, on utilise la version 1, qui est une version stable et courante pour les objets de type Service.

2. kind: Service
Cela définit le type de ressource Kubernetes que nous créons, ici un service. Le service est une abstraction qui permet de regrouper plusieurs pods et de les exposer sous un même nom d'URL ou une adresse IP.

3. metadata:
La section metadata contient des informations générales sur le service, telles que son nom et ses labels.

labels:

app: vote: Un label utilisé pour identifier ce service comme étant lié à l'application "vote". Les labels sont utilisés pour faire correspondre des ressources entre elles, comme faire correspondre ce service avec des pods qui portent un label app: vote.
name: vote: Le nom du service dans Kubernetes. Ici, le service s'appelle vote.

4. spec:
La section spec contient les spécifications détaillées du service. C'est ici que sont définis les comportements du service, comme le type de service, les ports, et le sélecteur.

type: NodePort: Cela définit le type de service. Un NodePort permet d'exposer un service à l'extérieur du cluster Kubernetes sur un port spécifique. Kubernetes va attribuer un port sur chaque nœud du cluster (ici, nodePort: 31000), ce qui permet aux utilisateurs d'accéder au service via ce port sur n'importe quel nœud du cluster.

ports: Cette section décrit les ports utilisés par le service.

name: "vote-service": Nom donné au port du service, ici vote-service.
port: 8080: Le port sur lequel le service écoute à l'intérieur du cluster. Ce port est celui que les autres ressources dans le cluster utiliseront pour communiquer avec ce service.
targetPort: 80: Le port sur lequel les pods ciblés par ce service écoutent. En d'autres termes, le service redirige les requêtes reçues sur le port 8080 vers le port 80 des pods.
nodePort: 31000: Le port exposé sur chaque nœud du cluster pour accéder au service depuis l'extérieur. Ici, ce sera le port 31000.
selector: Cette section définit un sélecteur qui détermine quels pods ce service doit exposer. Il cherche tous les pods qui ont le label app: vote, ce qui signifie que ce service redirigera le trafic vers tous les pods qui portent ce label.

app: vote: Cela correspond à l'étiquette app: vote sur les pods. Ce sélecteur s'assure que seuls les pods qui portent ce label seront accessibles via ce service.
En résumé :
Ce fichier YAML définit un service Kubernetes qui :

Est de type NodePort, ce qui permet d'exposer le service à l'extérieur du cluster.
Écoute sur le port 8080 à l'intérieur du cluster et redirige le trafic vers le port 80 des pods ciblés.
Est accessible depuis l'extérieur du cluster sur le port 31000 sur tous les nœuds du cluster.
Cible les pods ayant l'étiquette app: vote.
Cela permet à toute application extérieure de se connecter au service via l'IP d'un nœud et le port 31000, ce qui redirigera le trafic vers les pods contenant l'application "vote".


### Déclaration du service redis

1. apiVersion: v1
Cette ligne spécifie la version de l'API de Kubernetes utilisée pour cette ressource. v1 est la version stable pour les services Kubernetes.
2. kind: Service
Le type de la ressource est Service. Cela signifie que tu crées un service dans Kubernetes pour permettre la communication entre les différents pods du cluster.
3. metadata:
Cette section contient des informations sur le service, comme des labels et un nom.

labels:

app: redis: Ce label est utilisé pour identifier le service dans Kubernetes. Les labels sont des paires clé-valeur qui aident à organiser et à filtrer les ressources. Ici, app: redis permet de dire que ce service correspond à l'application Redis.
name: redis:

Le nom du service dans Kubernetes. Cela permet de l'identifier facilement dans le cluster. En l'occurrence, ce service s'appelle redis. Ce nom est important, car les autres pods ou services Kubernetes pourront l'utiliser pour accéder à ce service.
4. spec:
La section spec contient la spécification du service, c'est-à-dire comment ce service doit fonctionner et comment il est configuré.

type: ClusterIP:

Le type du service. Ici, il s'agit de ClusterIP, ce qui signifie que le service sera accessible uniquement à l'intérieur du cluster Kubernetes, et non à partir de l'extérieur du cluster. C'est généralement le type de service que l'on utilise pour des bases de données ou des services internes qui ne doivent pas être accessibles publiquement.
Les autres types de services incluent NodePort (qui expose le service à l'extérieur du cluster via un port sur chaque nœud) et LoadBalancer (qui crée un load balancer externe dans certains environnements, comme les clouds).
ports:

Cette section définit les ports que le service doit écouter et comment il les dirige vers les pods.

name: "redis-service":

Un nom pour le port dans la configuration du service. C'est optionnel et permet de donner un nom significatif au port, mais il n'a pas d'impact direct sur le fonctionnement.
port: 6379:

C'est le port que le service écoute à l'intérieur du cluster. Les autres services ou pods qui ont besoin de se connecter à Redis vont se connecter à ce port dans le service Kubernetes.
targetPort: 6379:

targetPort est le port où Redis écoute à l'intérieur du pod. Donc, même si le service Kubernetes écoute sur le port 6379, il redirige le trafic vers ce même port sur les pods qui exécutent Redis. Cela permet au service d'agir comme un point d'accès unique, tout en dirigeant correctement le trafic vers les pods où Redis est réellement exécuté.
En résumé : port est l'interface externe (le port d'accès pour les autres pods), et targetPort est le port interne où l'application Redis fonctionne.
selector:

Le sélecteur est utilisé pour associer ce service à un ou plusieurs pods spécifiques.

app: redis:

Ce sélecteur fait en sorte que ce service cible uniquement les pods ayant le label app: redis. En d'autres termes, le service va envoyer le trafic vers les pods qui ont ce label.
Cela permet de faire en sorte que ce service ne cible que les pods Redis spécifiquement. Les pods de Redis doivent être définis avec ce label (app: redis) pour que le service puisse les sélectionner et y rediriger le trafic.
